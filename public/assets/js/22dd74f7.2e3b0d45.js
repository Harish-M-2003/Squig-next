"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[980],{5904:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/","docId":"intro","unlisted":false},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installation","href":"/getting-started/installation","docId":"getting-started/installation","unlisted":false},{"type":"link","label":"Quick Start","href":"/getting-started/quick-start","docId":"getting-started/quick-start","unlisted":false}],"href":"/category/getting-started"},{"type":"category","label":"Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Quick start","href":"/basics/","docId":"basics/basics","unlisted":false},{"type":"link","label":"Variables","href":"/basics/variables","docId":"basics/variables","unlisted":false},{"type":"link","label":"Constant","href":"/basics/Constant","docId":"basics/Constant","unlisted":false},{"type":"link","label":"Datatypes","href":"/basics/datatypes","docId":"basics/datatypes","unlisted":false},{"type":"link","label":"Type Keyword","href":"/basics/type-keyword","docId":"basics/type-keyword","unlisted":false},{"type":"link","label":"User input","href":"/basics/input","docId":"basics/input","unlisted":false},{"type":"link","label":"Operators","href":"/basics/operators","docId":"basics/operators","unlisted":false},{"type":"link","label":"Conditionals","href":"/basics/conditionals","docId":"basics/conditionals","unlisted":false},{"type":"link","label":"Functions","href":"/basics/functions","docId":"basics/functions","unlisted":false},{"type":"link","label":"Files","href":"/basics/files","docId":"basics/files","unlisted":false},{"type":"link","label":"Working with modules","href":"/basics/imports","docId":"basics/imports","unlisted":false}],"href":"/category/basics"},{"type":"category","label":"Developer Docs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Project Structure","href":"/developer-docs/project-structure","docId":"developer-docs/project-structure","unlisted":false},{"type":"link","label":"Token","href":"/developer-docs/token","docId":"developer-docs/token","unlisted":false},{"type":"link","label":"Lexer","href":"/developer-docs/lexer","docId":"developer-docs/lexer","unlisted":false},{"type":"link","label":"Parser","href":"/developer-docs/parser","docId":"developer-docs/parser","unlisted":false},{"type":"link","label":"Interpreter","href":"/developer-docs/interpreter","docId":"developer-docs/interpreter","unlisted":false},{"type":"link","label":"Types","href":"/developer-docs/Types","docId":"developer-docs/Types","unlisted":false},{"type":"link","label":"Node","href":"/developer-docs/Node","docId":"developer-docs/Node","unlisted":false},{"type":"link","label":"Error","href":"/developer-docs/error","docId":"developer-docs/error","unlisted":false},{"type":"link","label":"Position","href":"/developer-docs/position","docId":"developer-docs/position","unlisted":false}],"href":"/category/developer-docs"}]},"docs":{"basics/basics":{"id":"basics/basics","title":"Basics","description":"Now that you\'ve had a taste of Squig with our quick start guide, let\'s delve into the language basics. Understanding these foundational concepts will pave the way for more complex and powerful Squig programming.","sidebar":"tutorialSidebar"},"basics/conditionals":{"id":"basics/conditionals","title":"Conditional Statements and Loops","description":"Conditional and iterative statements are fundamental programming constructs that enable dynamic control flow and repetitive execution of code blocks based on specific conditions or for a predetermined number of iterations.","sidebar":"tutorialSidebar"},"basics/Constant":{"id":"basics/Constant","title":"Constant","description":"In Squig, the imu keyword is used to declare constants. Constants are variables whose values cannot be changed once they are initialized. This is useful when you have values that should remain constant throughout your program.","sidebar":"tutorialSidebar"},"basics/datatypes":{"id":"basics/datatypes","title":"Data Types","description":"Data types are a fundamental concept in programming that define the kind of data that can be stored and manipulated within a program. They specify the format of data values, how they should be interpreted, and what operations can be performed on them. In essence, data types provide a blueprint for representing and organizing data in a structured manner.","sidebar":"tutorialSidebar"},"basics/files":{"id":"basics/files","title":"Files","description":"Squig provides simple and expressive syntax for handling files. This documentation covers reading and writing to files using Squig.","sidebar":"tutorialSidebar"},"basics/functions":{"id":"basics/functions","title":"Functions","description":"Functions in Squig allow you to encapsulate reusable pieces of code, making your programs modular and easier to manage. Here\'s an overview of creating and using functions in Squig.","sidebar":"tutorialSidebar"},"basics/imports":{"id":"basics/imports","title":"\'use\' Keyword","description":"The \'use\' keyword in Squig is used to import modules, enabling the inclusion of external code and functionalities into Squig programs. It allows Squig programs to access functions, classes, and other definitions defined in external modules, expanding the capabilities and features available to Squig developers.","sidebar":"tutorialSidebar"},"basics/input":{"id":"basics/input","title":"User Input","description":"User input refers to data provided by the user of a computer program during its execution. It allows users to interact with the program by entering information, making selections, or issuing commands through input devices such as keyboards, mice, touchscreens, or other input devices.","sidebar":"tutorialSidebar"},"basics/operators":{"id":"basics/operators","title":"Operators","description":"In programming languages, an operator is a symbol or keyword that represents a specific operation or action to be performed on one or more operands. Operators define how data values are manipulated, combined, compared, or transformed within expressions and statements in a program. They play a fundamental role in performing computations, controlling program flow, and implementing various algorithms and operations.","sidebar":"tutorialSidebar"},"basics/type-keyword":{"id":"basics/type-keyword","title":"Type Keyword","description":"The type keyword in Squig is used to provide insight into the data types at runtime. It enables developers to dynamically determine the type of a variable or expression, allowing for more flexible programming.","sidebar":"tutorialSidebar"},"basics/variables":{"id":"basics/variables","title":"Variables","description":"A variable in programming is a symbolic name or identifier that represents a storage location in computer memory. It holds a value that can be changed or modified during the execution of a program. Variables play a fundamental role in programming, allowing developers to store, manipulate, and retrieve data efficiently.","sidebar":"tutorialSidebar"},"developer-docs/error":{"id":"developer-docs/error","title":"error","description":"Squig does\'nt supports object oriented programming","sidebar":"tutorialSidebar"},"developer-docs/interpreter":{"id":"developer-docs/interpreter","title":"Interpreter","description":"The Interpreter class in Squig is responsible for interpreting the abstract syntax tree (AST) generated by the Parser. It traverses the AST and executes the tasks defined by the Squig program, such as evaluating expressions, executing statements, and handling control flow constructs.","sidebar":"tutorialSidebar"},"developer-docs/lexer":{"id":"developer-docs/lexer","title":"Lexer","description":"The Lexer class in Squig is responsible for performing lexical analysis, which involves breaking down the source code into tokens. Tokens are the smallest units of syntax in a Squig program and serve as the building blocks for further processing during compilation.","sidebar":"tutorialSidebar"},"developer-docs/Node":{"id":"developer-docs/Node","title":"Node","description":"Squig does\'nt supports object oriented programming","sidebar":"tutorialSidebar"},"developer-docs/parser":{"id":"developer-docs/parser","title":"Parser","description":"The Parser class in Squig is responsible for parsing the source code based on the defined grammar rules. It analyzes the sequence of tokens generated by the Lexer and constructs a syntax tree representing the structure of the Squig program.","sidebar":"tutorialSidebar"},"developer-docs/position":{"id":"developer-docs/position","title":"position","description":"Squig does\'nt supports object oriented programming","sidebar":"tutorialSidebar"},"developer-docs/project-structure":{"id":"developer-docs/project-structure","title":"Project Structure","description":"The Squig project is organized into several modules, each responsible for a specific aspect of the language implementation. Here\'s an overview of the project structure:","sidebar":"tutorialSidebar"},"developer-docs/token":{"id":"developer-docs/token","title":"Token","description":"The Token module in Squig defines the Token class, which represents individual tokens used during lexical analysis. These tokens are generated by the Lexer module and are the smallest units of syntax in a Squig program.","sidebar":"tutorialSidebar"},"developer-docs/Types":{"id":"developer-docs/Types","title":"Types","description":"Squig does\'nt supports object oriented programming","sidebar":"tutorialSidebar"},"getting-started/installation":{"id":"getting-started/installation","title":"Installation","description":"Squig is currently under active development, and an official release is not yet available for installation. We appreciate your interest and encourage you to stay tuned for future updates. Thank you for your understanding as we work towards bringing you a stable release.","sidebar":"tutorialSidebar"},"getting-started/quick-start":{"id":"getting-started/quick-start","title":"Quick Start","description":"This quick start guide is your express ticket to diving into Squig and coding swiftly with ease.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Squig, a programming language crafted with a passion for exploration. Unlike traditional languages, Squig doesn\'t chase performance efficiency or real-world applications\u2014at least not yet.","sidebar":"tutorialSidebar"}}}}')}}]);
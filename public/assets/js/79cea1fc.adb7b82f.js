"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[574],{9087:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var n=r(1527),i=r(8672);const t={sidebar_label:"Parser",sidebar_position:4},o="Parser",a={id:"developer-docs/parser",title:"Parser",description:"The Parser class in Squig is responsible for parsing the source code based on the defined grammar rules. It analyzes the sequence of tokens generated by the Lexer and constructs a syntax tree representing the structure of the Squig program.",source:"@site/docs/developer-docs/parser.md",sourceDirName:"developer-docs",slug:"/developer-docs/parser",permalink:"/developer-docs/parser",draft:!1,unlisted:!1,editUrl:"https://github.com/Harish-M-2003/Squig-Docusaurus/tree/main/docs/developer-docs/parser.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Parser",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Lexer",permalink:"/developer-docs/lexer"},next:{title:"Interpreter",permalink:"/developer-docs/interpreter"}},l={},c=[{value:"Parser Class",id:"parser-class",level:2},{value:"Grammar Rules:",id:"grammar-rules",level:3},{value:"Methods:",id:"methods",level:3},{value:"Code Explanation:",id:"code-explanation",level:3},{value:"Example Usage:",id:"example-usage",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"parser",children:"Parser"}),"\n",(0,n.jsx)(s.p,{children:"The Parser class in Squig is responsible for parsing the source code based on the defined grammar rules. It analyzes the sequence of tokens generated by the Lexer and constructs a syntax tree representing the structure of the Squig program."}),"\n",(0,n.jsx)(s.h2,{id:"parser-class",children:"Parser Class"}),"\n",(0,n.jsx)(s.p,{children:"The Parser class defines methods to parse different components of Squig code according to the specified grammar rules. These methods recursively traverse the token sequence and apply parsing rules to identify and construct syntactic elements such as expressions, statements, and declarations."}),"\n",(0,n.jsx)(s.h3,{id:"grammar-rules",children:"Grammar Rules:"}),"\n",(0,n.jsx)(s.p,{children:"The Squig grammar consists of various rules for defining expressions, statements, and other language constructs. These rules govern the syntax of Squig code and guide the parsing process performed by the Parser class."}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Statements"}),": Represented by the ",(0,n.jsx)(s.code,{children:"statements"})," rule, which defines the structure of statements in Squig programs."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Expressions"}),": Defined by the ",(0,n.jsx)(s.code,{children:"expression"})," rule, which specifies the syntax for expressions in Squig code."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Relational Expressions"}),": Governed by the ",(0,n.jsx)(s.code,{children:"relational-expression"})," rule, which handles relational operators and expressions."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Arithmetic Expressions"}),": Described by the ",(0,n.jsx)(s.code,{children:"arithmetic-expression"})," rule, which deals with arithmetic operations and expressions."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Terms and Factors"}),": Governed by the ",(0,n.jsx)(s.code,{children:"term"})," and ",(0,n.jsx)(s.code,{children:"factor"})," rules, which define the structure of arithmetic terms and factors."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Power Expressions"}),": Defined by the ",(0,n.jsx)(s.code,{children:"power"})," rule, which handles power operations and expressions."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Calls and Atoms"}),": Represented by the ",(0,n.jsx)(s.code,{children:"call"})," and ",(0,n.jsx)(s.code,{children:"atom"})," rules, which define function calls and atomic expressions."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Variables and Collections"}),": Governed by the ",(0,n.jsx)(s.code,{children:"variable"})," and ",(0,n.jsx)(s.code,{children:"collection-statement"})," rules, which handle variables and collections."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Control Flow Statements"}),": Described by rules such as ",(0,n.jsx)(s.code,{children:"if-statement"}),", ",(0,n.jsx)(s.code,{children:"for-loop-statement"}),", ",(0,n.jsx)(s.code,{children:"function-statement"}),", ",(0,n.jsx)(s.code,{children:"file-statement"}),", and ",(0,n.jsx)(s.code,{children:"switch-statement"}),", which define various control flow constructs in Squig code."]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"methods",children:"Methods:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"statement(self)"})}),": Parses a single statement in the Squig program."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"expression(self)"})}),": Parses an expression according to the grammar rules."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"relational_expression(self)"})}),": Parses a relational expression, handling relational operators."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"arithmetic_expression(self)"})}),": Parses an arithmetic expression, handling arithmetic operations."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"term(self)"})}),": Parses a term in an arithmetic expression."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"factor(self)"})}),": Parses a factor in an arithmetic expression."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"power(self)"})}),": Parses a power expression, handling exponentiation."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"call(self)"})}),": Parses a function call expression."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"atom(self)"})}),": Parses an atomic expression."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"variable(self)"})}),": Parses a variable or variable expression."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"collection_statement(self)"})}),": Parses a collection statement."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"if_statement(self)"})}),": Parses an if statement."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"for_loop_statement(self)"})}),": Parses a for loop statement."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"function_statement(self)"})}),": Parses a function statement."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"file_statement(self)"})}),": Parses a file statement."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"switch_statement(self)"})}),": Parses a switch statement."]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"code-explanation",children:"Code Explanation:"}),"\n",(0,n.jsx)(s.p,{children:"The provided code defines the Parser class and its methods for parsing different components of Squig code. Each method implements parsing logic according to the specified grammar rules, recursively traversing the token sequence and constructing syntax trees."}),"\n",(0,n.jsx)(s.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'from Parser import Parser\r\n\r\n# Initialize Parser with token sequence\r\nparser = Parser(tokens)\r\n\r\n# Parse the Squig code\r\nsyntax_tree, error = parser.parse()\r\n\r\nif error:\r\n    print("Error:", error)\r\nelse:\r\n    # Execute or analyze the syntax tree\r\n    ...\n'})}),"\n",(0,n.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,n.jsx)(s.p,{children:"The Parser class in Squig plays a crucial role in the compilation process by interpreting the structure of Squig code according to predefined grammar rules. By accurately parsing Squig programs, the Parser enables subsequent phases of compilation, such as interpretation or code generation, ensuring correct execution of Squig programs."})]})}function h(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8672:(e,s,r)=>{r.d(s,{Z:()=>a,a:()=>o});var n=r(959);const i={},t=n.createContext(i);function o(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[49],{3330:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var t=r(1527),s=r(8672);const i={sidebar_label:"Interpreter",sidebar_position:5},o="Interpreter",d={id:"developer-docs/interpreter",title:"Interpreter",description:"The Interpreter class in Squig is responsible for interpreting the abstract syntax tree (AST) generated by the Parser. It traverses the AST and executes the tasks defined by the Squig program, such as evaluating expressions, executing statements, and handling control flow constructs.",source:"@site/docs/developer-docs/interpreter.md",sourceDirName:"developer-docs",slug:"/developer-docs/interpreter",permalink:"/developer-docs/interpreter",draft:!1,unlisted:!1,editUrl:"https://github.com/Harish-M-2003/Squig-Docusaurus/tree/main/docs/developer-docs/interpreter.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Interpreter",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Parser",permalink:"/developer-docs/parser"},next:{title:"Types",permalink:"/developer-docs/Types"}},l={},c=[{value:"Interpreter Class",id:"interpreter-class",level:2},{value:"Methods:",id:"methods",level:3},{value:"Code Explanation:",id:"code-explanation",level:3},{value:"Example Usage:",id:"example-usage",level:3},{value:"Conclusion",id:"conclusion",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"interpreter",children:"Interpreter"}),"\n",(0,t.jsx)(n.p,{children:"The Interpreter class in Squig is responsible for interpreting the abstract syntax tree (AST) generated by the Parser. It traverses the AST and executes the tasks defined by the Squig program, such as evaluating expressions, executing statements, and handling control flow constructs."}),"\n",(0,t.jsx)(n.h2,{id:"interpreter-class",children:"Interpreter Class"}),"\n",(0,t.jsx)(n.p,{children:"The Interpreter class defines methods to traverse the AST nodes and execute the corresponding tasks based on their types. It recursively walks through the AST, interpreting each node and performing the necessary actions to execute the Squig program."}),"\n",(0,t.jsx)(n.h3,{id:"methods",children:"Methods:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"interpret(self, node)"})}),": Interprets the AST node and executes the corresponding task."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"statement(self, node)"})}),": Interprets a statement node in the AST."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"expression(self, node)"})}),": Interprets an expression node in the AST."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"relational_expression(self, node)"})}),": Interprets a relational expression node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"arithmetic_expression(self, node)"})}),": Interprets an arithmetic expression node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"term(self, node)"})}),": Interprets a term node in an arithmetic expression."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"factor(self, node)"})}),": Interprets a factor node in an arithmetic expression."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"power(self, node)"})}),": Interprets a power expression node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"call(self, node)"})}),": Interprets a function call node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"atom(self, node)"})}),": Interprets an atomic expression node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"variable(self, node)"})}),": Interprets a variable node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"collection_statement(self, node)"})}),": Interprets a collection statement node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"if_statement(self, node)"})}),": Interprets an if statement node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"for_loop_statement(self, node)"})}),": Interprets a for loop statement node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"function_statement(self, node)"})}),": Interprets a function statement node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"file_statement(self, node)"})}),": Interprets a file statement node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"switch_statement(self, node)"})}),": Interprets a switch statement node."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"code-explanation",children:"Code Explanation:"}),"\n",(0,t.jsx)(n.p,{children:"The Interpreter class implements the logic to traverse the AST nodes and execute the tasks defined by the Squig program. Each method corresponds to a specific type of AST node and performs the interpretation accordingly. By recursively interpreting AST nodes, the Interpreter executes the Squig program in a step-by-step manner, adhering to the semantics defined by the Squig language."}),"\n",(0,t.jsx)(n.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from Interpreter import Interpreter\r\n\r\n# Initialize Interpreter with AST root node\r\ninterpreter = Interpreter()\r\n\r\n# Interpret the AST and execute the Squig program\r\ninterpreter.interpret(ast_root)\r\n\r\n# Optionally, access interpreter attributes or results\r\n...\n"})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"The Interpreter class in Squig serves as the execution engine for Squig programs, traversing the AST and executing tasks defined by the program's structure. By interpreting AST nodes and performing the corresponding actions, the Interpreter enables the execution of Squig code, facilitating the realization of desired behaviors and outcomes."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8672:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>o});var t=r(959);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[792],{9876:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=a(1527),s=a(8672);const i={sidebar_label:"Datatypes",sidebar_position:3},r="Data Types",l={id:"basics/datatypes",title:"Data Types",description:"Data types are a fundamental concept in programming that define the kind of data that can be stored and manipulated within a program. They specify the format of data values, how they should be interpreted, and what operations can be performed on them. In essence, data types provide a blueprint for representing and organizing data in a structured manner.",source:"@site/docs/basics/datatypes.md",sourceDirName:"basics",slug:"/basics/datatypes",permalink:"/basics/datatypes",draft:!1,unlisted:!1,editUrl:"https://github.com/Harish-M-2003/Squig-Docusaurus/tree/main/docs/basics/datatypes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Datatypes",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Constant",permalink:"/basics/Constant"},next:{title:"Type Keyword",permalink:"/basics/type-keyword"}},o={},c=[{value:"Number Type: Integers and Floats",id:"number-type-integers-and-floats",level:2},{value:"String Type : Immutable",id:"string-type--immutable",level:2},{value:"Mutable String Type:",id:"mutable-string-type",level:2},{value:"Declaration and Initialization",id:"declaration-and-initialization",level:3},{value:"Boolean Type :",id:"boolean-type-",level:2},{value:"Collection Type :",id:"collection-type-",level:2},{value:"Map Type :",id:"map-type-",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"data-types",children:"Data Types"}),"\n",(0,t.jsx)(n.p,{children:"Data types are a fundamental concept in programming that define the kind of data that can be stored and manipulated within a program. They specify the format of data values, how they should be interpreted, and what operations can be performed on them. In essence, data types provide a blueprint for representing and organizing data in a structured manner."}),"\n",(0,t.jsx)(n.p,{children:"Common built-in data types found in programming languages include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Number"}),": Represents whole and fractional numbers."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"String"}),": Represents sequences of characters."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MutableString"}),": Represents sequences of characters that can be modified dynamically."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Boolean"}),": Represents true or false values."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Array/List"}),": Represents collections of values of the same type."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Map"}),": Represents collections of key-value pairs."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Understanding data types is essential for writing correct and efficient programs, as it enables developers to select appropriate types for representing and manipulating data, ensuring compatibility and consistency throughout the codebase."}),"\n",(0,t.jsx)(n.p,{children:"Squig supports various data types to represent different kinds of values in your programs. Understanding these data types is crucial for effective programming. Let's explore the primary data types in Squig."}),"\n",(0,t.jsx)(n.h2,{id:"number-type-integers-and-floats",children:"Number Type: Integers and Floats"}),"\n",(0,t.jsx)(n.p,{children:"In Squig, integers and floating-point numbers are both represented under the number type. This allows you to work with numeric values of varying precision in your programs."}),"\n",(0,t.jsx)(n.p,{children:"Integers represent whole numbers without any fractional or decimal part."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"let age : 25\n"})}),"\n",(0,t.jsx)(n.p,{children:"Floats represent numbers with a decimal point, allowing for fractional values."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"let pi : 3.14\n"})}),"\n",(0,t.jsx)(n.h2,{id:"string-type--immutable",children:"String Type : Immutable"}),"\n",(0,t.jsx)(n.p,{children:"Strings represent sequences of characters, such as text or words.\r\nIn Squig, the String type is immutable, meaning that once a string is created, its value cannot be changed. This ensures that string values remain consistent and predictable throughout your program."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'let message : "Hello, Squig!"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"mutable-string-type",children:"Mutable String Type:"}),"\n",(0,t.jsxs)(n.p,{children:["In Squig, a mutable string is represented by enclosing text between backticks ",(0,t.jsx)(n.code,{children:"`"}),". Unlike regular strings, mutable strings allow you to modify their contents after they've been created."]}),"\n",(0,t.jsx)(n.h3,{id:"declaration-and-initialization",children:"Declaration and Initialization"}),"\n",(0,t.jsxs)(n.p,{children:["You can declare and initialize a mutable string variable by enclosing text between backticks ",(0,t.jsx)(n.code,{children:"`"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-squig",children:"let message : `Hello, world!`\n"})}),"\n",(0,t.jsx)(n.h2,{id:"boolean-type-",children:"Boolean Type :"}),"\n",(0,t.jsx)(n.p,{children:"Booleans represent true or false values, often used for logical conditions."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"let isCodingFun : true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"collection-type-",children:"Collection Type :"}),"\n",(0,t.jsx)(n.p,{children:"In Squig, the Collection type allows you to work with sequences of elements, similar to lists in Python. These sequences can contain elements of any data type, and you can perform various operations on them, such as adding, removing, and accessing elements."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-squig",children:'let fruits : {"apple", "banana", "orange"}\r\nlet numbers : {1, 2, 3, 4, 5}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, ",(0,t.jsx)(n.code,{children:"fruits"})," and ",(0,t.jsx)(n.code,{children:"numbers"})," are Collection variables containing strings and integers, respectively."]}),"\n",(0,t.jsx)(n.h2,{id:"map-type-",children:"Map Type :"}),"\n",(0,t.jsx)(n.p,{children:"In Squig, a Map is a collection of key-value pairs, allowing elements to be accessed by both index values and key values. Each element in a Map consists of a unique key and its corresponding value."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-squig",children:'let myMap : {"name" : "Squig", "version" : "0.0.0"}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, ",(0,t.jsx)(n.code,{children:"myMap"})," is a Map variable containing two key-value pairs: ",(0,t.jsx)(n.code,{children:'"name"'})," with the value ",(0,t.jsx)(n.code,{children:'"Squig"'})," and ",(0,t.jsx)(n.code,{children:'"version"'})," with the value ",(0,t.jsx)(n.code,{children:'"0.0.0"'}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8672:(e,n,a)=>{a.d(n,{Z:()=>l,a:()=>r});var t=a(959);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);